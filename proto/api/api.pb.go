// Code generated by protoc-gen-go.
// source: github.com/micro/twitter-srv/proto/api/api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/twitter-srv/proto/api/api.proto

It has these top-level messages:
	Point
	Contributor
	Coordinates
	Hashtag
	Url
	Mention
	MediaSize
	Sizes
	Variant
	VideoInfo
	Media
	Entities
	BoundingBox
	ContainedWithin
	Place
	Tweet
	User
	TweetRequest
	TweetResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Point struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng" json:"lng,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Contributor struct {
	Id         int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IdStr      string `protobuf:"bytes,2,opt,name=id_str" json:"id_str,omitempty"`
	ScreenName string `protobuf:"bytes,3,opt,name=screen_name" json:"screen_name,omitempty"`
}

func (m *Contributor) Reset()                    { *m = Contributor{} }
func (m *Contributor) String() string            { return proto.CompactTextString(m) }
func (*Contributor) ProtoMessage()               {}
func (*Contributor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Coordinates struct {
	Coordinates []float64 `protobuf:"fixed64,1,rep,name=coordinates" json:"coordinates,omitempty"`
	Type        string    `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *Coordinates) Reset()                    { *m = Coordinates{} }
func (m *Coordinates) String() string            { return proto.CompactTextString(m) }
func (*Coordinates) ProtoMessage()               {}
func (*Coordinates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Hashtag struct {
	Indices []int64 `protobuf:"varint,1,rep,name=indices" json:"indices,omitempty"`
	Text    string  `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *Hashtag) Reset()                    { *m = Hashtag{} }
func (m *Hashtag) String() string            { return proto.CompactTextString(m) }
func (*Hashtag) ProtoMessage()               {}
func (*Hashtag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Url struct {
	Indices     []int64 `protobuf:"varint,1,rep,name=indices" json:"indices,omitempty"`
	Url         string  `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	DisplayUrl  string  `protobuf:"bytes,3,opt,name=display_url" json:"display_url,omitempty"`
	ExpandedUrl string  `protobuf:"bytes,4,opt,name=expanded_url" json:"expanded_url,omitempty"`
}

func (m *Url) Reset()                    { *m = Url{} }
func (m *Url) String() string            { return proto.CompactTextString(m) }
func (*Url) ProtoMessage()               {}
func (*Url) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Mention struct {
	Name       string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Indices    []int64 `protobuf:"varint,2,rep,name=indices" json:"indices,omitempty"`
	ScreenName string  `protobuf:"bytes,3,opt,name=screen_name" json:"screen_name,omitempty"`
	Id         int64   `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	IdStr      string  `protobuf:"bytes,5,opt,name=id_str" json:"id_str,omitempty"`
}

func (m *Mention) Reset()                    { *m = Mention{} }
func (m *Mention) String() string            { return proto.CompactTextString(m) }
func (*Mention) ProtoMessage()               {}
func (*Mention) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type MediaSize struct {
	W      int64  `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	H      int64  `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Resize string `protobuf:"bytes,3,opt,name=resize" json:"resize,omitempty"`
}

func (m *MediaSize) Reset()                    { *m = MediaSize{} }
func (m *MediaSize) String() string            { return proto.CompactTextString(m) }
func (*MediaSize) ProtoMessage()               {}
func (*MediaSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Sizes struct {
	Medium *MediaSize `protobuf:"bytes,1,opt,name=medium" json:"medium,omitempty"`
	Thumb  *MediaSize `protobuf:"bytes,2,opt,name=thumb" json:"thumb,omitempty"`
	Small  *MediaSize `protobuf:"bytes,3,opt,name=small" json:"small,omitempty"`
	Large  *MediaSize `protobuf:"bytes,4,opt,name=large" json:"large,omitempty"`
}

func (m *Sizes) Reset()                    { *m = Sizes{} }
func (m *Sizes) String() string            { return proto.CompactTextString(m) }
func (*Sizes) ProtoMessage()               {}
func (*Sizes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Sizes) GetMedium() *MediaSize {
	if m != nil {
		return m.Medium
	}
	return nil
}

func (m *Sizes) GetThumb() *MediaSize {
	if m != nil {
		return m.Thumb
	}
	return nil
}

func (m *Sizes) GetSmall() *MediaSize {
	if m != nil {
		return m.Small
	}
	return nil
}

func (m *Sizes) GetLarge() *MediaSize {
	if m != nil {
		return m.Large
	}
	return nil
}

type Variant struct {
	Bitrate     int64  `protobuf:"varint,1,opt,name=bitrate" json:"bitrate,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type" json:"content_type,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (m *Variant) Reset()                    { *m = Variant{} }
func (m *Variant) String() string            { return proto.CompactTextString(m) }
func (*Variant) ProtoMessage()               {}
func (*Variant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type VideoInfo struct {
	AspectRatio    []int64    `protobuf:"varint,1,rep,name=aspect_ratio" json:"aspect_ratio,omitempty"`
	DurationMillis int64      `protobuf:"varint,2,opt,name=duration_millis" json:"duration_millis,omitempty"`
	Variants       []*Variant `protobuf:"bytes,3,rep,name=variants" json:"variants,omitempty"`
}

func (m *VideoInfo) Reset()                    { *m = VideoInfo{} }
func (m *VideoInfo) String() string            { return proto.CompactTextString(m) }
func (*VideoInfo) ProtoMessage()               {}
func (*VideoInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VideoInfo) GetVariants() []*Variant {
	if m != nil {
		return m.Variants
	}
	return nil
}

type Media struct {
	Id                int64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IdStr             string     `protobuf:"bytes,2,opt,name=id_str" json:"id_str,omitempty"`
	MediaUrl          string     `protobuf:"bytes,3,opt,name=media_url" json:"media_url,omitempty"`
	MediaUrlHttps     string     `protobuf:"bytes,4,opt,name=media_url_https" json:"media_url_https,omitempty"`
	Url               string     `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	DisplayUrl        string     `protobuf:"bytes,6,opt,name=display_url" json:"display_url,omitempty"`
	ExpandedUrl       string     `protobuf:"bytes,7,opt,name=expanded_url" json:"expanded_url,omitempty"`
	Sizes             *Sizes     `protobuf:"bytes,8,opt,name=sizes" json:"sizes,omitempty"`
	SourceStatusId    int64      `protobuf:"varint,9,opt,name=source_status_id" json:"source_status_id,omitempty"`
	SourceStatusIdStr string     `protobuf:"bytes,10,opt,name=source_status_id_str" json:"source_status_id_str,omitempty"`
	Type              string     `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
	Indices           []int64    `protobuf:"varint,12,rep,name=indices" json:"indices,omitempty"`
	VideoInfo         *VideoInfo `protobuf:"bytes,13,opt,name=video_info" json:"video_info,omitempty"`
}

func (m *Media) Reset()                    { *m = Media{} }
func (m *Media) String() string            { return proto.CompactTextString(m) }
func (*Media) ProtoMessage()               {}
func (*Media) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Media) GetSizes() *Sizes {
	if m != nil {
		return m.Sizes
	}
	return nil
}

func (m *Media) GetVideoInfo() *VideoInfo {
	if m != nil {
		return m.VideoInfo
	}
	return nil
}

type Entities struct {
	Hashtags     []*Hashtag `protobuf:"bytes,1,rep,name=hashtags" json:"hashtags,omitempty"`
	Urls         []*Url     `protobuf:"bytes,2,rep,name=urls" json:"urls,omitempty"`
	Url          *Url       `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	UserMentions []*Mention `protobuf:"bytes,4,rep,name=user_mentions" json:"user_mentions,omitempty"`
	Media        []*Media   `protobuf:"bytes,5,rep,name=media" json:"media,omitempty"`
}

func (m *Entities) Reset()                    { *m = Entities{} }
func (m *Entities) String() string            { return proto.CompactTextString(m) }
func (*Entities) ProtoMessage()               {}
func (*Entities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Entities) GetHashtags() []*Hashtag {
	if m != nil {
		return m.Hashtags
	}
	return nil
}

func (m *Entities) GetUrls() []*Url {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *Entities) GetUrl() *Url {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *Entities) GetUserMentions() []*Mention {
	if m != nil {
		return m.UserMentions
	}
	return nil
}

func (m *Entities) GetMedia() []*Media {
	if m != nil {
		return m.Media
	}
	return nil
}

type BoundingBox struct {
	Coordinates []*Coordinates `protobuf:"bytes,1,rep,name=coordinates" json:"coordinates,omitempty"`
	Type        string         `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *BoundingBox) Reset()                    { *m = BoundingBox{} }
func (m *BoundingBox) String() string            { return proto.CompactTextString(m) }
func (*BoundingBox) ProtoMessage()               {}
func (*BoundingBox) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BoundingBox) GetCoordinates() []*Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

type ContainedWithin struct {
	Attributes  map[string]string `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoundingBox *BoundingBox      `protobuf:"bytes,2,opt,name=bounding_box" json:"bounding_box,omitempty"`
	Country     string            `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	CountryCode string            `protobuf:"bytes,4,opt,name=country_code" json:"country_code,omitempty"`
	FullName    string            `protobuf:"bytes,5,opt,name=full_name" json:"full_name,omitempty"`
	Id          string            `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	PlaceType   string            `protobuf:"bytes,8,opt,name=place_type" json:"place_type,omitempty"`
	Url         string            `protobuf:"bytes,9,opt,name=url" json:"url,omitempty"`
}

func (m *ContainedWithin) Reset()                    { *m = ContainedWithin{} }
func (m *ContainedWithin) String() string            { return proto.CompactTextString(m) }
func (*ContainedWithin) ProtoMessage()               {}
func (*ContainedWithin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ContainedWithin) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ContainedWithin) GetBoundingBox() *BoundingBox {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

type Place struct {
	Attributes      map[string]string  `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoundingBox     *BoundingBox       `protobuf:"bytes,2,opt,name=bounding_box" json:"bounding_box,omitempty"`
	ContainedWithin []*ContainedWithin `protobuf:"bytes,3,rep,name=contained_within" json:"contained_within,omitempty"`
	Country         string             `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	CountryCode     string             `protobuf:"bytes,5,opt,name=country_code" json:"country_code,omitempty"`
	FullName        string             `protobuf:"bytes,6,opt,name=full_name" json:"full_name,omitempty"`
	Geometry        *BoundingBox       `protobuf:"bytes,7,opt,name=geometry" json:"geometry,omitempty"`
	Id              string             `protobuf:"bytes,8,opt,name=id" json:"id,omitempty"`
	Name            string             `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	PlaceType       string             `protobuf:"bytes,10,opt,name=place_type" json:"place_type,omitempty"`
	Polylines       []string           `protobuf:"bytes,11,rep,name=polylines" json:"polylines,omitempty"`
	Url             string             `protobuf:"bytes,12,opt,name=url" json:"url,omitempty"`
}

func (m *Place) Reset()                    { *m = Place{} }
func (m *Place) String() string            { return proto.CompactTextString(m) }
func (*Place) ProtoMessage()               {}
func (*Place) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Place) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Place) GetBoundingBox() *BoundingBox {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

func (m *Place) GetContainedWithin() []*ContainedWithin {
	if m != nil {
		return m.ContainedWithin
	}
	return nil
}

func (m *Place) GetGeometry() *BoundingBox {
	if m != nil {
		return m.Geometry
	}
	return nil
}

type Tweet struct {
	Contributors         []*Contributor    `protobuf:"bytes,1,rep,name=contributors" json:"contributors,omitempty"`
	Coordinates          *Coordinates      `protobuf:"bytes,2,opt,name=coordinates" json:"coordinates,omitempty"`
	CreatedAt            string            `protobuf:"bytes,3,opt,name=created_at" json:"created_at,omitempty"`
	Entities             *Entities         `protobuf:"bytes,4,opt,name=entities" json:"entities,omitempty"`
	ExtendedEntities     *Entities         `protobuf:"bytes,5,opt,name=extended_entities" json:"extended_entities,omitempty"`
	FavoriteCount        int64             `protobuf:"varint,6,opt,name=favorite_count" json:"favorite_count,omitempty"`
	Favorited            bool              `protobuf:"varint,7,opt,name=favorited" json:"favorited,omitempty"`
	FilterLevel          string            `protobuf:"bytes,8,opt,name=filter_level" json:"filter_level,omitempty"`
	Id                   int64             `protobuf:"varint,9,opt,name=id" json:"id,omitempty"`
	IdStr                string            `protobuf:"bytes,10,opt,name=id_str" json:"id_str,omitempty"`
	InReplyToScreenName  string            `protobuf:"bytes,11,opt,name=in_reply_to_screen_name" json:"in_reply_to_screen_name,omitempty"`
	InReplyToStatusId    int64             `protobuf:"varint,12,opt,name=in_reply_to_status_id" json:"in_reply_to_status_id,omitempty"`
	InReplyToStatusIdStr string            `protobuf:"bytes,13,opt,name=in_reply_to_status_id_str" json:"in_reply_to_status_id_str,omitempty"`
	InReplyToUserId      int64             `protobuf:"varint,14,opt,name=in_reply_to_user_id" json:"in_reply_to_user_id,omitempty"`
	InReplyToUserIdStr   string            `protobuf:"bytes,15,opt,name=in_reply_to_user_id_str" json:"in_reply_to_user_id_str,omitempty"`
	Lang                 string            `protobuf:"bytes,16,opt,name=lang" json:"lang,omitempty"`
	Place                *Place            `protobuf:"bytes,17,opt,name=place" json:"place,omitempty"`
	PossiblySensitive    bool              `protobuf:"varint,18,opt,name=possibly_sensitive" json:"possibly_sensitive,omitempty"`
	RetweetCount         int64             `protobuf:"varint,19,opt,name=retweet_count" json:"retweet_count,omitempty"`
	Retweeted            bool              `protobuf:"varint,20,opt,name=retweeted" json:"retweeted,omitempty"`
	RetweetedStatus      *Tweet            `protobuf:"bytes,21,opt,name=retweeted_status" json:"retweeted_status,omitempty"`
	Source               string            `protobuf:"bytes,22,opt,name=source" json:"source,omitempty"`
	Scopes               map[string]string `protobuf:"bytes,23,rep,name=scopes" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Text                 string            `protobuf:"bytes,24,opt,name=text" json:"text,omitempty"`
	Truncated            bool              `protobuf:"varint,25,opt,name=truncated" json:"truncated,omitempty"`
	User                 *User             `protobuf:"bytes,26,opt,name=user" json:"user,omitempty"`
	WithheldCopyright    bool              `protobuf:"varint,27,opt,name=withheld_copyright" json:"withheld_copyright,omitempty"`
	WithheldInCountries  []string          `protobuf:"bytes,28,rep,name=withheld_in_countries" json:"withheld_in_countries,omitempty"`
	WithheldScope        string            `protobuf:"bytes,29,opt,name=withheld_scope" json:"withheld_scope,omitempty"`
}

func (m *Tweet) Reset()                    { *m = Tweet{} }
func (m *Tweet) String() string            { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()               {}
func (*Tweet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Tweet) GetContributors() []*Contributor {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *Tweet) GetCoordinates() *Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Tweet) GetEntities() *Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *Tweet) GetExtendedEntities() *Entities {
	if m != nil {
		return m.ExtendedEntities
	}
	return nil
}

func (m *Tweet) GetPlace() *Place {
	if m != nil {
		return m.Place
	}
	return nil
}

func (m *Tweet) GetRetweetedStatus() *Tweet {
	if m != nil {
		return m.RetweetedStatus
	}
	return nil
}

func (m *Tweet) GetScopes() map[string]string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *Tweet) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	ContributorsEnabled            bool      `protobuf:"varint,1,opt,name=contributors_enabled" json:"contributors_enabled,omitempty"`
	CreatedAt                      string    `protobuf:"bytes,2,opt,name=created_at" json:"created_at,omitempty"`
	DefaultProfile                 bool      `protobuf:"varint,3,opt,name=default_profile" json:"default_profile,omitempty"`
	DefaultProfileImage            bool      `protobuf:"varint,4,opt,name=default_profile_image" json:"default_profile_image,omitempty"`
	Description                    string    `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Entities                       *Entities `protobuf:"bytes,6,opt,name=entities" json:"entities,omitempty"`
	FavouritesCount                int64     `protobuf:"varint,7,opt,name=favourites_count" json:"favourites_count,omitempty"`
	FollowRequestSent              bool      `protobuf:"varint,8,opt,name=follow_request_sent" json:"follow_request_sent,omitempty"`
	FollowersCount                 int64     `protobuf:"varint,9,opt,name=followers_count" json:"followers_count,omitempty"`
	Following                      bool      `protobuf:"varint,10,opt,name=following" json:"following,omitempty"`
	FriendsCount                   int64     `protobuf:"varint,11,opt,name=friends_count" json:"friends_count,omitempty"`
	GeoEnabled                     bool      `protobuf:"varint,12,opt,name=geo_enabled" json:"geo_enabled,omitempty"`
	Id                             int64     `protobuf:"varint,13,opt,name=id" json:"id,omitempty"`
	IdStr                          string    `protobuf:"bytes,14,opt,name=id_str" json:"id_str,omitempty"`
	IsTranslator                   bool      `protobuf:"varint,15,opt,name=is_translator" json:"is_translator,omitempty"`
	Lang                           string    `protobuf:"bytes,16,opt,name=lang" json:"lang,omitempty"`
	ListedCount                    int64     `protobuf:"varint,17,opt,name=listed_count" json:"listed_count,omitempty"`
	Location                       string    `protobuf:"bytes,18,opt,name=location" json:"location,omitempty"`
	Name                           string    `protobuf:"bytes,19,opt,name=name" json:"name,omitempty"`
	Notifications                  bool      `protobuf:"varint,20,opt,name=notifications" json:"notifications,omitempty"`
	ProfileBackgroundColor         string    `protobuf:"bytes,21,opt,name=profile_background_color" json:"profile_background_color,omitempty"`
	ProfileBackgroundImageUrl      string    `protobuf:"bytes,22,opt,name=profile_background_image_url" json:"profile_background_image_url,omitempty"`
	ProfileBackgroundImageUrlHttps string    `protobuf:"bytes,23,opt,name=profile_background_image_url_https" json:"profile_background_image_url_https,omitempty"`
	ProfileBackgroundTile          bool      `protobuf:"varint,24,opt,name=profile_background_tile" json:"profile_background_tile,omitempty"`
	ProfileBannerUrl               string    `protobuf:"bytes,25,opt,name=profile_banner_url" json:"profile_banner_url,omitempty"`
	ProfileImageUrl                string    `protobuf:"bytes,26,opt,name=profile_image_url" json:"profile_image_url,omitempty"`
	ProfileImageUrlHttps           string    `protobuf:"bytes,27,opt,name=profile_image_url_https" json:"profile_image_url_https,omitempty"`
	ProfileLinkColor               string    `protobuf:"bytes,28,opt,name=profile_link_color" json:"profile_link_color,omitempty"`
	ProfileSidebarBorderColor      string    `protobuf:"bytes,29,opt,name=profile_sidebar_border_color" json:"profile_sidebar_border_color,omitempty"`
	ProfileSidebarFillColor        string    `protobuf:"bytes,30,opt,name=profile_sidebar_fill_color" json:"profile_sidebar_fill_color,omitempty"`
	ProfileTextColor               string    `protobuf:"bytes,31,opt,name=profile_text_color" json:"profile_text_color,omitempty"`
	ProfileUseBackgroundImage      bool      `protobuf:"varint,32,opt,name=profile_use_background_image" json:"profile_use_background_image,omitempty"`
	Protected                      bool      `protobuf:"varint,33,opt,name=protected" json:"protected,omitempty"`
	ScreenName                     string    `protobuf:"bytes,34,opt,name=screen_name" json:"screen_name,omitempty"`
	ShowAllInlineMedia             bool      `protobuf:"varint,35,opt,name=show_all_inline_media" json:"show_all_inline_media,omitempty"`
	Status                         *Tweet    `protobuf:"bytes,36,opt,name=status" json:"status,omitempty"`
	StatusesCount                  int64     `protobuf:"varint,37,opt,name=statuses_count" json:"statuses_count,omitempty"`
	TimeZone                       string    `protobuf:"bytes,38,opt,name=time_zone" json:"time_zone,omitempty"`
	Url                            string    `protobuf:"bytes,39,opt,name=url" json:"url,omitempty"`
	UtcOffset                      int64     `protobuf:"varint,40,opt,name=utc_offset" json:"utc_offset,omitempty"`
	Verified                       bool      `protobuf:"varint,41,opt,name=verified" json:"verified,omitempty"`
	WithheldInCountries            []string  `protobuf:"bytes,42,rep,name=withheld_in_countries" json:"withheld_in_countries,omitempty"`
	WithheldScope                  string    `protobuf:"bytes,43,opt,name=withheld_scope" json:"withheld_scope,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *User) GetEntities() *Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *User) GetStatus() *Tweet {
	if m != nil {
		return m.Status
	}
	return nil
}

type TweetRequest struct {
	Status             string   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	InReplyToStatusId  uint64   `protobuf:"varint,2,opt,name=in_reply_to_status_id" json:"in_reply_to_status_id,omitempty"`
	PossiblySensitive  bool     `protobuf:"varint,3,opt,name=possibly_sensitive" json:"possibly_sensitive,omitempty"`
	LatLng             *Point   `protobuf:"bytes,4,opt,name=lat_lng" json:"lat_lng,omitempty"`
	PlaceId            string   `protobuf:"bytes,5,opt,name=place_id" json:"place_id,omitempty"`
	DisplayCoordinates bool     `protobuf:"varint,6,opt,name=display_coordinates" json:"display_coordinates,omitempty"`
	TrimUser           bool     `protobuf:"varint,7,opt,name=trim_user" json:"trim_user,omitempty"`
	MediaIds           []uint64 `protobuf:"varint,8,rep,name=media_ids" json:"media_ids,omitempty"`
}

func (m *TweetRequest) Reset()                    { *m = TweetRequest{} }
func (m *TweetRequest) String() string            { return proto.CompactTextString(m) }
func (*TweetRequest) ProtoMessage()               {}
func (*TweetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TweetRequest) GetLatLng() *Point {
	if m != nil {
		return m.LatLng
	}
	return nil
}

type TweetResponse struct {
	Contributors         []*Contributor    `protobuf:"bytes,1,rep,name=contributors" json:"contributors,omitempty"`
	Coordinates          *Coordinates      `protobuf:"bytes,2,opt,name=coordinates" json:"coordinates,omitempty"`
	CreatedAt            string            `protobuf:"bytes,3,opt,name=created_at" json:"created_at,omitempty"`
	Entities             *Entities         `protobuf:"bytes,4,opt,name=entities" json:"entities,omitempty"`
	ExtendedEntities     *Entities         `protobuf:"bytes,5,opt,name=extended_entities" json:"extended_entities,omitempty"`
	FavoriteCount        int64             `protobuf:"varint,6,opt,name=favorite_count" json:"favorite_count,omitempty"`
	Favorited            bool              `protobuf:"varint,7,opt,name=favorited" json:"favorited,omitempty"`
	FilterLevel          string            `protobuf:"bytes,8,opt,name=filter_level" json:"filter_level,omitempty"`
	Id                   int64             `protobuf:"varint,9,opt,name=id" json:"id,omitempty"`
	IdStr                string            `protobuf:"bytes,10,opt,name=id_str" json:"id_str,omitempty"`
	InReplyToScreenName  string            `protobuf:"bytes,11,opt,name=in_reply_to_screen_name" json:"in_reply_to_screen_name,omitempty"`
	InReplyToStatusId    int64             `protobuf:"varint,12,opt,name=in_reply_to_status_id" json:"in_reply_to_status_id,omitempty"`
	InReplyToStatusIdStr string            `protobuf:"bytes,13,opt,name=in_reply_to_status_id_str" json:"in_reply_to_status_id_str,omitempty"`
	InReplyToUserId      int64             `protobuf:"varint,14,opt,name=in_reply_to_user_id" json:"in_reply_to_user_id,omitempty"`
	InReplyToUserIdStr   string            `protobuf:"bytes,15,opt,name=in_reply_to_user_id_str" json:"in_reply_to_user_id_str,omitempty"`
	Lang                 string            `protobuf:"bytes,16,opt,name=lang" json:"lang,omitempty"`
	Place                *Place            `protobuf:"bytes,17,opt,name=place" json:"place,omitempty"`
	PossiblySensitive    bool              `protobuf:"varint,18,opt,name=possibly_sensitive" json:"possibly_sensitive,omitempty"`
	RetweetCount         int64             `protobuf:"varint,19,opt,name=retweet_count" json:"retweet_count,omitempty"`
	Retweeted            bool              `protobuf:"varint,20,opt,name=retweeted" json:"retweeted,omitempty"`
	RetweetedStatus      *Tweet            `protobuf:"bytes,21,opt,name=retweeted_status" json:"retweeted_status,omitempty"`
	Source               string            `protobuf:"bytes,22,opt,name=source" json:"source,omitempty"`
	Scopes               map[string]string `protobuf:"bytes,23,rep,name=scopes" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Text                 string            `protobuf:"bytes,24,opt,name=text" json:"text,omitempty"`
	Truncated            bool              `protobuf:"varint,25,opt,name=truncated" json:"truncated,omitempty"`
	User                 *User             `protobuf:"bytes,26,opt,name=user" json:"user,omitempty"`
	WithheldCopyright    bool              `protobuf:"varint,27,opt,name=withheld_copyright" json:"withheld_copyright,omitempty"`
	WithheldInCountries  []string          `protobuf:"bytes,28,rep,name=withheld_in_countries" json:"withheld_in_countries,omitempty"`
	WithheldScope        string            `protobuf:"bytes,29,opt,name=withheld_scope" json:"withheld_scope,omitempty"`
}

func (m *TweetResponse) Reset()                    { *m = TweetResponse{} }
func (m *TweetResponse) String() string            { return proto.CompactTextString(m) }
func (*TweetResponse) ProtoMessage()               {}
func (*TweetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TweetResponse) GetContributors() []*Contributor {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *TweetResponse) GetCoordinates() *Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *TweetResponse) GetEntities() *Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *TweetResponse) GetExtendedEntities() *Entities {
	if m != nil {
		return m.ExtendedEntities
	}
	return nil
}

func (m *TweetResponse) GetPlace() *Place {
	if m != nil {
		return m.Place
	}
	return nil
}

func (m *TweetResponse) GetRetweetedStatus() *Tweet {
	if m != nil {
		return m.RetweetedStatus
	}
	return nil
}

func (m *TweetResponse) GetScopes() map[string]string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *TweetResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "Point")
	proto.RegisterType((*Contributor)(nil), "Contributor")
	proto.RegisterType((*Coordinates)(nil), "Coordinates")
	proto.RegisterType((*Hashtag)(nil), "Hashtag")
	proto.RegisterType((*Url)(nil), "Url")
	proto.RegisterType((*Mention)(nil), "Mention")
	proto.RegisterType((*MediaSize)(nil), "MediaSize")
	proto.RegisterType((*Sizes)(nil), "Sizes")
	proto.RegisterType((*Variant)(nil), "Variant")
	proto.RegisterType((*VideoInfo)(nil), "VideoInfo")
	proto.RegisterType((*Media)(nil), "Media")
	proto.RegisterType((*Entities)(nil), "Entities")
	proto.RegisterType((*BoundingBox)(nil), "BoundingBox")
	proto.RegisterType((*ContainedWithin)(nil), "ContainedWithin")
	proto.RegisterType((*Place)(nil), "Place")
	proto.RegisterType((*Tweet)(nil), "Tweet")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*TweetRequest)(nil), "TweetRequest")
	proto.RegisterType((*TweetResponse)(nil), "TweetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Api service

type ApiClient interface {
	Tweet(ctx context.Context, in *TweetRequest, opts ...client.CallOption) (*TweetResponse, error)
}

type apiClient struct {
	c           client.Client
	serviceName string
}

func NewApiClient(serviceName string, c client.Client) ApiClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "api"
	}
	return &apiClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *apiClient) Tweet(ctx context.Context, in *TweetRequest, opts ...client.CallOption) (*TweetResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Api.Tweet", in)
	out := new(TweetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiHandler interface {
	Tweet(context.Context, *TweetRequest, *TweetResponse) error
}

func RegisterApiHandler(s server.Server, hdlr ApiHandler) {
	s.Handle(s.NewHandler(&Api{hdlr}))
}

type Api struct {
	ApiHandler
}

func (h *Api) Tweet(ctx context.Context, in *TweetRequest, out *TweetResponse) error {
	return h.ApiHandler.Tweet(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 1690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x58, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x3e, 0xb2, 0xfe, 0xa8, 0x91, 0xe4, 0x1f, 0x3a, 0xb6, 0x69, 0xc5, 0x49, 0x6c, 0x9d, 0x9c,
	0x73, 0x7c, 0x7c, 0x10, 0x3a, 0xf1, 0xe9, 0x45, 0x51, 0xa0, 0x05, 0x92, 0xa2, 0x40, 0x7b, 0x91,
	0x22, 0x68, 0x9a, 0x14, 0xbd, 0x22, 0x28, 0x72, 0x25, 0x2d, 0x42, 0x91, 0x2a, 0xb9, 0x94, 0xed,
	0xdc, 0xf7, 0x09, 0x8a, 0xde, 0xf5, 0x11, 0xfa, 0x1e, 0xed, 0x53, 0xf4, 0x59, 0x3a, 0x3b, 0xbb,
	0x4b, 0x51, 0xb4, 0xe2, 0x02, 0xb9, 0x2c, 0x72, 0x11, 0xc0, 0xdc, 0x9d, 0x9d, 0x9d, 0xfd, 0xe6,
	0xfb, 0x66, 0x46, 0x81, 0xc7, 0x13, 0x2e, 0xa6, 0xf9, 0xc8, 0x0d, 0x92, 0xd9, 0xf9, 0x8c, 0x07,
	0x69, 0x72, 0x2e, 0x2e, 0xb9, 0x10, 0x2c, 0x7d, 0x94, 0xa5, 0x8b, 0xf3, 0x79, 0x9a, 0x88, 0xe4,
	0xdc, 0x9f, 0x73, 0xf9, 0xcf, 0xa5, 0xaf, 0xe1, 0x09, 0x34, 0x5f, 0x24, 0x3c, 0x16, 0x76, 0x17,
	0xea, 0x91, 0x2f, 0x9c, 0xda, 0x71, 0xed, 0xb4, 0x46, 0x1f, 0xf1, 0xc4, 0xd9, 0x90, 0x1f, 0xc3,
	0xcf, 0xa0, 0xfb, 0x79, 0x12, 0x8b, 0x94, 0x8f, 0x72, 0x91, 0xa4, 0x36, 0xc0, 0x06, 0x0f, 0xc9,
	0xae, 0x6e, 0x6f, 0x42, 0x8b, 0x87, 0x5e, 0x26, 0x52, 0x32, 0xed, 0xd8, 0xbb, 0xd0, 0xcd, 0x82,
	0x94, 0xb1, 0xd8, 0x8b, 0xfd, 0x19, 0x73, 0xea, 0x72, 0x71, 0xf8, 0x58, 0x9e, 0x4f, 0xd2, 0x90,
	0xc7, 0xbe, 0x60, 0x99, 0xb4, 0x09, 0x96, 0x9f, 0xe8, 0xa8, 0x8e, 0x17, 0xf6, 0xa0, 0x21, 0xae,
	0xe7, 0x4c, 0xb9, 0x19, 0x9e, 0x42, 0xfb, 0x4b, 0x3f, 0x9b, 0x0a, 0x7f, 0x62, 0x6f, 0x41, 0x9b,
	0xc7, 0x21, 0x0f, 0xb4, 0x65, 0x9d, 0x2c, 0xd9, 0x95, 0xd0, 0x96, 0x5f, 0x43, 0xfd, 0x55, 0x1a,
	0xdd, 0xb4, 0xc2, 0x07, 0xe4, 0x69, 0xb4, 0x8c, 0x2a, 0xe4, 0xd9, 0x3c, 0xf2, 0xaf, 0x3d, 0xb9,
	0x48, 0x51, 0xd9, 0x77, 0xa0, 0xc7, 0xae, 0xe6, 0x7e, 0x1c, 0xb2, 0x90, 0x56, 0x1b, 0xe4, 0xef,
	0x7b, 0x68, 0x3f, 0x67, 0xb1, 0xe0, 0x49, 0x2c, 0x2f, 0xa2, 0x47, 0xd4, 0xc8, 0xbc, 0x74, 0xc3,
	0x06, 0xdd, 0xb0, 0xee, 0xa9, 0x1a, 0x9b, 0x46, 0x05, 0x9b, 0x26, 0xb9, 0x7e, 0x02, 0x9d, 0xe7,
	0x2c, 0xe4, 0xfe, 0x4b, 0xfe, 0x96, 0xd9, 0x1d, 0xa8, 0x5d, 0x6a, 0x0c, 0xf1, 0xcf, 0x29, 0x05,
	0x4a, 0x47, 0x52, 0x96, 0xe1, 0xbe, 0x46, 0x4e, 0x40, 0x53, 0x5a, 0x67, 0xf6, 0x00, 0x5a, 0x33,
	0x3c, 0x9b, 0xcf, 0xe8, 0x4c, 0xf7, 0x02, 0xdc, 0xa5, 0xab, 0x43, 0x68, 0x62, 0xce, 0x67, 0x23,
	0xf2, 0x71, 0x63, 0x2b, 0x9b, 0xf9, 0x91, 0x7a, 0xf2, 0x8d, 0xad, 0xc8, 0x4f, 0x27, 0x8c, 0x82,
	0x5d, 0xd9, 0x1a, 0x7e, 0x0a, 0xed, 0xd7, 0x7e, 0xca, 0x7d, 0x24, 0x05, 0xbe, 0x7a, 0xc4, 0x45,
	0x8a, 0x89, 0xd2, 0xc1, 0x22, 0x6a, 0x01, 0x72, 0x01, 0x21, 0xf2, 0x96, 0xf9, 0x32, 0x68, 0xab,
	0xa0, 0x5f, 0x43, 0xe7, 0x35, 0x0f, 0x59, 0xf2, 0x55, 0x3c, 0x4e, 0xa4, 0xbd, 0x9f, 0xcd, 0x59,
	0x20, 0x3c, 0x74, 0xc2, 0x13, 0x9d, 0x9d, 0x03, 0xd8, 0x0a, 0x73, 0x5a, 0x88, 0xbd, 0x19, 0x8f,
	0x22, 0x9e, 0x69, 0x00, 0x06, 0x60, 0x2d, 0xd4, 0xd5, 0x19, 0x7a, 0xab, 0x63, 0x60, 0x96, 0xab,
	0x63, 0x19, 0xfe, 0xbc, 0x01, 0x4d, 0x0a, 0xf2, 0x56, 0x06, 0xee, 0x40, 0x47, 0x22, 0xe5, 0x97,
	0x32, 0x8d, 0xb7, 0x15, 0x4b, 0xde, 0x54, 0x88, 0x79, 0xa6, 0x92, 0x6d, 0xc2, 0x6e, 0xae, 0x23,
	0x49, 0x6b, 0x2d, 0x49, 0xda, 0xb4, 0xba, 0x87, 0xb0, 0xca, 0xb4, 0x38, 0x16, 0x61, 0xd7, 0x72,
	0x55, 0x92, 0x1c, 0xd8, 0xce, 0x92, 0x3c, 0x0d, 0x18, 0x86, 0xe3, 0x8b, 0x3c, 0xf3, 0x30, 0xc8,
	0x0e, 0x05, 0x79, 0x04, 0x77, 0xaa, 0x3b, 0x14, 0x32, 0x90, 0x3b, 0xc3, 0xfd, 0x6e, 0x95, 0x68,
	0x3d, 0x02, 0xeb, 0x3e, 0xc0, 0x42, 0xe2, 0xe9, 0x71, 0x04, 0xd4, 0xe9, 0xeb, 0x74, 0x15, 0x10,
	0x0f, 0x7f, 0xac, 0x81, 0xf5, 0x05, 0x52, 0x56, 0x70, 0x22, 0x8a, 0x35, 0x55, 0xca, 0x51, 0x4a,
	0x90, 0x00, 0x1a, 0x29, 0xd9, 0xd0, 0xc0, 0x37, 0x28, 0xfe, 0x76, 0x2f, 0x1a, 0xae, 0x14, 0xce,
	0xce, 0x32, 0x73, 0x66, 0xe9, 0x01, 0xf4, 0xf3, 0x8c, 0xa5, 0xde, 0x4c, 0xe9, 0x40, 0x82, 0xa5,
	0xfc, 0x18, 0x61, 0xe0, 0xf3, 0x09, 0x4f, 0x04, 0xae, 0x4e, 0xcf, 0xa7, 0xac, 0xc8, 0x32, 0xf1,
	0x2c, 0xc9, 0x31, 0xf4, 0x78, 0xf2, 0x2c, 0xb9, 0xb2, 0x4f, 0x6e, 0xca, 0xbc, 0x7b, 0xd1, 0x73,
	0xcb, 0x95, 0x60, 0x55, 0xf4, 0x3f, 0x6d, 0xc0, 0x96, 0xac, 0x33, 0x3e, 0x8f, 0x59, 0xf8, 0x1d,
	0xd6, 0x31, 0x1e, 0xdb, 0x1f, 0x01, 0xf8, 0x42, 0x55, 0x9e, 0xc2, 0xc7, 0xb1, 0x5b, 0xb1, 0x72,
	0x9f, 0x16, 0x26, 0x88, 0x43, 0x7a, 0x6d, 0x0f, 0xa1, 0x37, 0xd2, 0x91, 0x78, 0xa3, 0xe4, 0x4a,
	0x0b, 0xa3, 0xe7, 0x96, 0xc3, 0x43, 0x98, 0x03, 0xfc, 0x44, 0xf3, 0x65, 0x3d, 0xd0, 0x0b, 0x5e,
	0x90, 0x84, 0x4c, 0x53, 0x04, 0xe9, 0x34, 0xce, 0xa3, 0x48, 0x69, 0xbc, 0x59, 0xd2, 0x78, 0xcb,
	0xa4, 0x8e, 0x76, 0x14, 0x2f, 0x70, 0x0b, 0xf9, 0x83, 0x59, 0xa6, 0x57, 0x59, 0x65, 0x8e, 0x49,
	0x1e, 0x74, 0x06, 0x4f, 0x60, 0xab, 0x1a, 0x2b, 0xee, 0xbf, 0x61, 0xd7, 0xba, 0xc8, 0xf4, 0xa1,
	0xb9, 0xf0, 0xa3, 0x5c, 0x23, 0xf2, 0xc9, 0xc6, 0xc7, 0xb5, 0xe1, 0x1f, 0xc8, 0xfa, 0x17, 0xd2,
	0xa9, 0x7d, 0xb6, 0x06, 0x8b, 0x7d, 0x97, 0xf6, 0xde, 0x0b, 0x81, 0x33, 0xd8, 0x0e, 0x0c, 0x90,
	0xde, 0x25, 0x21, 0xa9, 0x35, 0xb7, 0x5d, 0x45, 0xb8, 0x8c, 0x56, 0x63, 0x2d, 0x5a, 0xcd, 0x9b,
	0x68, 0x29, 0x84, 0xee, 0x83, 0x35, 0x61, 0xc9, 0x8c, 0xc9, 0xa3, 0xed, 0x35, 0x51, 0x28, 0x34,
	0xad, 0x15, 0x34, 0x3b, 0x6b, 0xd0, 0x04, 0x73, 0xc1, 0x3c, 0x89, 0xae, 0x23, 0x0c, 0x2d, 0x43,
	0xbd, 0xd4, 0x97, 0x00, 0xf7, 0xde, 0x17, 0xe0, 0x5f, 0x5a, 0xd0, 0xfc, 0xf6, 0x92, 0x31, 0x21,
	0x41, 0x0b, 0x96, 0x7d, 0xae, 0x4c, 0xd9, 0x65, 0xf3, 0xab, 0xb0, 0xda, 0xe0, 0x5a, 0x66, 0x35,
	0xc6, 0x8d, 0x7d, 0x01, 0xff, 0x0c, 0x3d, 0xec, 0xa7, 0x8a, 0x5c, 0x77, 0xc1, 0x62, 0x5a, 0xa2,
	0xba, 0xe0, 0x76, 0xdc, 0x42, 0xb3, 0x0f, 0x61, 0x07, 0x1b, 0x1a, 0xa3, 0x22, 0x53, 0x58, 0x35,
	0xab, 0x56, 0xfb, 0xb0, 0x39, 0xf6, 0x17, 0x49, 0xca, 0x05, 0xf3, 0x08, 0x7a, 0x02, 0xb8, 0x4e,
	0x98, 0xeb, 0xf5, 0x90, 0x10, 0xb6, 0x64, 0x72, 0xc6, 0x3c, 0xc2, 0xae, 0xef, 0x45, 0x6c, 0xc1,
	0x22, 0x8d, 0xae, 0x42, 0xba, 0x53, 0xa9, 0x9a, 0x0a, 0xd7, 0x07, 0x70, 0xc0, 0x63, 0x2f, 0x65,
	0xf3, 0xe8, 0xda, 0x13, 0x89, 0x57, 0x6e, 0x6c, 0xaa, 0x2a, 0xdd, 0x83, 0xbd, 0x15, 0x83, 0xa2,
	0xc0, 0xf5, 0xc8, 0xdf, 0x09, 0x1c, 0xae, 0xdd, 0xa6, 0x2b, 0xfa, 0x1a, 0x82, 0xdd, 0xb2, 0x09,
	0x95, 0x18, 0x3c, 0xbf, 0x49, 0xe7, 0x2b, 0xf7, 0xeb, 0x4d, 0x3a, 0xbd, 0x65, 0xa8, 0x11, 0xf9,
	0x38, 0x91, 0x6c, 0x9b, 0x02, 0x4c, 0xd4, 0x70, 0x76, 0x74, 0x01, 0x56, 0x0a, 0x19, 0x80, 0x3d,
	0x4f, 0xb2, 0x8c, 0x8f, 0xd0, 0x4b, 0xc6, 0xe2, 0x0c, 0x81, 0x5b, 0x30, 0xc7, 0x26, 0x4c, 0xf6,
	0xa0, 0x9f, 0x32, 0x21, 0xf3, 0xac, 0xd1, 0xdb, 0x35, 0xe8, 0xe9, 0x65, 0x44, 0xef, 0x0e, 0x59,
	0x1e, 0xc3, 0x76, 0xb1, 0xa4, 0x5f, 0xe2, 0xec, 0xe9, 0x7b, 0x14, 0x51, 0x10, 0x3d, 0x55, 0xce,
	0x9d, 0x7d, 0x0a, 0x67, 0x88, 0xdf, 0x41, 0x32, 0xc7, 0xac, 0x1d, 0x10, 0x65, 0x6c, 0x65, 0xe7,
	0xbe, 0xa4, 0x45, 0x45, 0x43, 0x33, 0xb6, 0x38, 0x86, 0xc7, 0x22, 0xcd, 0xe3, 0x40, 0xb2, 0xc4,
	0x39, 0xa4, 0x6b, 0x77, 0xb1, 0x3a, 0xe3, 0xb3, 0x9d, 0x01, 0x5d, 0xd5, 0x74, 0x5f, 0xe1, 0x87,
	0x7c, 0x91, 0x54, 0xe6, 0x94, 0x45, 0x21, 0x86, 0x3d, 0xbf, 0x4e, 0xf9, 0x64, 0x2a, 0x9c, 0xbb,
	0x74, 0x00, 0x53, 0x52, 0xec, 0x21, 0x78, 0x4a, 0x8e, 0x92, 0x3a, 0x47, 0xa4, 0x0b, 0xe4, 0x4b,
	0xb1, 0x4d, 0xd1, 0x39, 0xf7, 0x48, 0x22, 0x8f, 0xa0, 0x5b, 0x8e, 0xeb, 0xaf, 0xe4, 0xf1, 0xbb,
	0x05, 0x0d, 0x0a, 0x05, 0x7b, 0x58, 0x59, 0x1d, 0xc8, 0x54, 0x7f, 0x14, 0x31, 0xd5, 0x86, 0xad,
	0x0a, 0xe9, 0x37, 0x4c, 0xdf, 0x0d, 0xd9, 0xd8, 0xcf, 0x23, 0xe1, 0xe1, 0xac, 0x89, 0x8c, 0x54,
	0x63, 0x0d, 0x45, 0x5e, 0xd9, 0xf0, 0xf8, 0xcc, 0xd7, 0xb3, 0x88, 0x45, 0x9d, 0x98, 0x21, 0x05,
	0xf9, 0x5c, 0xb6, 0x1b, 0x5d, 0x5a, 0xca, 0x0a, 0x6a, 0x55, 0xb5, 0x81, 0x9d, 0x57, 0x6a, 0x20,
	0x97, 0x22, 0xc8, 0x74, 0x7e, 0xdb, 0x94, 0x5f, 0x64, 0xdd, 0x38, 0x89, 0xa2, 0xe4, 0x12, 0xc9,
	0xf5, 0x43, 0xce, 0x32, 0x21, 0x89, 0x21, 0x48, 0x11, 0x96, 0x0c, 0x50, 0x6d, 0xb2, 0xd4, 0x9c,
	0xea, 0x14, 0x9a, 0xa2, 0x0d, 0x2c, 0x52, 0xa4, 0x10, 0xe2, 0xcf, 0x18, 0xd1, 0x8d, 0x43, 0x63,
	0xd9, 0x25, 0x4b, 0x8c, 0x15, 0xcb, 0x5b, 0x01, 0x46, 0x8f, 0x6c, 0x95, 0xd2, 0xfa, 0x15, 0xa5,
	0x6d, 0x6a, 0xea, 0xf6, 0x79, 0xe6, 0xe1, 0x48, 0x15, 0x67, 0x38, 0x6e, 0x27, 0x8a, 0xdf, 0x56,
	0x85, 0xdf, 0x28, 0x60, 0x9c, 0x89, 0x24, 0x98, 0xea, 0xae, 0x1d, 0x72, 0xb5, 0x0d, 0x56, 0x94,
	0x04, 0x34, 0x35, 0x11, 0xa9, 0x97, 0x05, 0x73, 0xd7, 0xb8, 0x8e, 0x13, 0xc1, 0xc7, 0x5c, 0xd9,
	0x64, 0x05, 0x9f, 0x1d, 0x83, 0xf2, 0xc8, 0x0f, 0xde, 0x4c, 0x52, 0x59, 0x7d, 0xd1, 0x71, 0x84,
	0x97, 0xef, 0xd1, 0xc1, 0x87, 0x70, 0xb4, 0xc6, 0x82, 0x52, 0x42, 0x53, 0x8f, 0x62, 0xf9, 0x19,
	0x0c, 0x6f, 0xb3, 0xd2, 0x93, 0xd5, 0x81, 0xa9, 0x27, 0x6b, 0x6c, 0x85, 0xa4, 0x80, 0x43, 0x41,
	0x49, 0xa9, 0x16, 0x06, 0x71, 0x8c, 0x72, 0x97, 0x17, 0x1d, 0xd2, 0xe1, 0x43, 0xd8, 0x59, 0xa1,
	0x05, 0x6d, 0x0d, 0xaa, 0x7e, 0xab, 0x17, 0xdf, 0x25, 0x83, 0x92, 0x5f, 0x6c, 0x12, 0x6f, 0xf4,
	0x33, 0x8f, 0xaa, 0xcf, 0xcc, 0x70, 0x7a, 0x1a, 0xf9, 0x29, 0xf6, 0xc6, 0x34, 0xc4, 0xbb, 0x95,
	0xd5, 0x3d, 0x2d, 0xe6, 0x41, 0xd5, 0x0a, 0x3f, 0x22, 0x6d, 0x73, 0xbf, 0x7a, 0x8b, 0x14, 0xb5,
	0xde, 0x7b, 0x50, 0xbd, 0x05, 0xf5, 0x7c, 0x03, 0x2a, 0xe7, 0x98, 0xde, 0x2f, 0x1b, 0x19, 0xfe,
	0xfe, 0xc2, 0xc1, 0x18, 0x59, 0x73, 0x62, 0x68, 0x5f, 0xae, 0xbb, 0x43, 0x53, 0x77, 0xb3, 0x29,
	0xb2, 0x17, 0x87, 0x78, 0x14, 0xb9, 0xec, 0x7b, 0x9e, 0x9a, 0xbd, 0xfe, 0x49, 0x67, 0xf6, 0xb1,
	0xf2, 0xa8, 0x0a, 0xf5, 0x70, 0xa5, 0x42, 0xa1, 0xf8, 0xd5, 0x7a, 0x21, 0x87, 0x7f, 0x19, 0x62,
	0x0b, 0x3e, 0x63, 0xde, 0xdb, 0x24, 0x66, 0xce, 0xbf, 0xcb, 0x03, 0xca, 0x7f, 0x4c, 0xcf, 0xcd,
	0x45, 0xe0, 0x25, 0xe3, 0x71, 0xc6, 0x84, 0x73, 0x6a, 0x68, 0xb7, 0x60, 0x29, 0xd2, 0x0a, 0x23,
	0xfd, 0xef, 0xed, 0x95, 0xe7, 0xec, 0x1d, 0x95, 0xe7, 0x7f, 0x34, 0xe0, 0xfd, 0x56, 0x83, 0x1e,
	0x85, 0xf7, 0x8d, 0x92, 0x22, 0xd5, 0x51, 0x15, 0x7d, 0xed, 0xf6, 0x26, 0x23, 0xeb, 0x49, 0xe3,
	0x1d, 0xe5, 0xbd, 0xae, 0xa5, 0xdc, 0x46, 0x39, 0x79, 0xf2, 0x47, 0x6b, 0xc3, 0xf4, 0x04, 0xfa,
	0x59, 0x8b, 0xd1, 0xab, 0x29, 0x02, 0xdd, 0x98, 0x4a, 0xb2, 0x6b, 0x06, 0xfd, 0x72, 0x2b, 0x6f,
	0x99, 0xbc, 0xe0, 0x53, 0x66, 0xd4, 0x81, 0x74, 0x37, 0x2d, 0x7e, 0x51, 0xf0, 0x50, 0x4e, 0xfc,
	0xf5, 0xd3, 0xc6, 0xf0, 0xd7, 0x16, 0xf4, 0xf5, 0x4b, 0xb2, 0x39, 0x2a, 0x8d, 0x7d, 0x98, 0x1d,
	0x3e, 0xcc, 0x0e, 0xef, 0x37, 0x3b, 0x9c, 0x55, 0x66, 0x87, 0x81, 0xbb, 0x42, 0xac, 0xbf, 0xc3,
	0x0c, 0x71, 0x71, 0x0e, 0xf5, 0xa7, 0x73, 0x6e, 0x9f, 0x9a, 0x41, 0xbb, 0xef, 0x96, 0xcb, 0xc0,
	0x60, 0x73, 0xf5, 0xc9, 0xc3, 0x7f, 0x8c, 0x5a, 0xf4, 0x7f, 0x53, 0xff, 0xff, 0x33, 0x00, 0x00,
	0xff, 0xff, 0x31, 0x4a, 0xa6, 0xce, 0xcf, 0x12, 0x00, 0x00,
}
